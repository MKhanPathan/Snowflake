-- Create department table
CREATE OR REPLACE TABLE demo_db.test.department(
    dept_id VARCHAR(4) CONSTRAINT pk_dept_id PRIMARY KEY,
    dept_name VARCHAR(50) NOT NULL
);

-- Load data into department table
INSERT INTO demo_db.test.department(dept_id, dept_name) VALUES
('D101', 'HR'),
('D102', 'Finance'),
('D103', 'IT');

-- Create employees table
CREATE OR REPLACE TABLE demo_db.test.employees(
    emp_id INT CONSTRAINT pk_emp_id PRIMARY KEY,
    emp_name VARCHAR(100) NOT NULL,
    email VARCHAR(200),
    salary number NOT NULL,
    location VARCHAR(50),
    dept_id VARCHAR(4) NOT NULL CONSTRAINT fk_dept_id FOREIGN KEY REFERENCES demo_db.test.department(dept_id)
);

-- Load data into employees table
INSERT INTO demo_db.test.employees (emp_id, emp_name, email, salary, location, dept_id) VALUES
(1001, 'emp1', 'emp1001@xyz.com', 25000, 'hyderabad', 'D101'),
(1002, 'emp2', 'emp1002@xyz.com', 38000, 'chennai', 'D102'),
(1003, 'emp3', 'emp1003@xyz.com', 33500, 'hyderabad', 'D101'),
(1004, 'emp4', 'emp1004@xyz.com', 45000, 'hyderabad', 'D102'),
(1005, 'emp5', 'emp1005@xyz.com', 38000, 'bangalore', 'D103'),
(1006, 'emp6', 'emp1006@xyz.com', 43000, 'bangalore', 'D103'),
(1007, 'emp7', 'emp1007@xyz.com', 34000, 'chennai', 'D102'),
(1008, 'emp8', 'emp1008@xyz.com', 43000, 'chennai', 'D103');


-- Using Subquery
SELECT emp_id, emp_name, email, salary, location, dept_name 
FROM ( 
SELECT e.emp_id, e.emp_name, e.email, e.salary, e.location, d.dept_name,
DENSE_RANK() OVER(PARTITION BY e.dept_id ORDER BY e.salary DESC) as salary_dr
FROM demo_db.test.employees e INNER JOIN demo_db.test.department d
ON e.dept_id=d.dept_id ) AS temp WHERE salary_dr=1;

-- Using CTE
WITH cte_max_sal AS 
(
SELECT e.emp_id, e.emp_name, e.email, e.salary, e.location, d.dept_name,
DENSE_RANK() OVER(PARTITION BY e.dept_id ORDER BY e.salary DESC) as salary_dr
FROM demo_db.test.employees e INNER JOIN demo_db.test.department d
ON e.dept_id=d.dept_id
)
SELECT emp_id, emp_name, email, salary, location, dept_name
FROM cte_max_sal WHERE salary_dr=1;


-- Using QUALIFY
-- 1. We can mention the window function in SELECT columns list and refer the alias name in QUALIFY
SELECT e.emp_id, e.emp_name, e.email, e.salary, e.location, d.dept_name,
DENSE_RANK() OVER(PARTITION BY e.dept_id ORDER BY e.salary DESC) AS sal_dr
FROM demo_db.test.employees e INNER JOIN demo_db.test.department d
ON e.dept_id=d.dept_id
QUALIFY sal_dr=1;

-- 2. We can mention the window function in the filter predicate of the QUALIFY clause
SELECT e.emp_id, e.emp_name, e.email, e.salary, e.location, d.dept_name
FROM demo_db.test.employees e INNER JOIN demo_db.test.department d
ON e.dept_id=d.dept_id
QUALIFY DENSE_RANK() OVER(PARTITION BY e.dept_id ORDER BY e.salary DESC)=1;
